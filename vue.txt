- The v-bind directive
The v-bind directive lets us bind an HTML attribute to data in the Vue instance. This makes it easy to chage the attribute value dynamically.

<div v-bind:[attribute]="[Vue data]"></div>

Example:

<img v-bind:src="url">

Bind style

<div v-bind:style="{ fontSize: size }">
    Text Example
</div>

also

<div v-bind:style="{ fontSize: size + 'px' }">
    Text Example
</div>

also (not recommended)

<div v-bind:style="{ 'fontSize': size + 'px' }">
    Text Example
</div>

Another property

<div v-bind:style="{ backgroundColor: 'hsl('+bgVal+'80%,80%}">
    Notice the background color on this div tag.
</div>

The background color is set with a JavaScript conditional (ternary) expression depending on whether the 'isImportant' data property value is 'true' or 'false'.

<div v-bind:style="{ backgroundColor: isImportant ? 'lightcoral' : 'lighgray' }">
    Conditional background color.
</div>

Bind class
The class name is taken from the 'className' Vue data property:

<div v-bind:class="className">
    The class is set with Vue.
</div>

The value of v-bind:class can also be and object, where the class name will only take effect if it is set to 'true':

<div v-bind:class="{ myClass: true }">
    The class is set conditionally to change the background color.
</div>

When the calue of v-bind:class is an object, the class can be assigned depending on a Vue property:

<div v-bind:class="{ myClass: isImportant }">
    The class is set conditionally to change the background color.
</div>

Shorthand for v-bind
The shorthand for 'v-bind:' is simply ':'.

<div :class="{ impClass: isImportant }">
    The Class is set conditionally to change the background color.
</div>

Vue v-if directive

It is a lot easier to create an HTML element depending on an condition in Vue with the v-if directive than with plain JavaScript.

With Vue you just write the if-statement directly in the HTML element you want to create conditionally.

Conditional rendering in Vue
Conditional rendering in Vue is done by using the v-if, v-else-if and v-else directives.

<p v-if="typeWritersInStock">
    in stock
</p>

<p v-else>
    not in stock
</p>

Conditions in Vue
A condition, or "if-statement", is something that is either true or false.

A condition is often a comparison check between two values like in the example above to see if one value is greater than the other.

We use comparison operators like <, >= or !== to do such checks.

Comparison checks can also be combined with logical operators such as && or ||.

Go to our JavaScript tutorial page to find out more about JavaScript comparisons.

<p v-if="typeWritersInStock > 0">
    in stock
</p>

<p v-else>
    not in stock
</p>

Directives for conditional rendering

<p v-if="typewriterCount>3">
  In stock
</p>

<p v-else-if="typewriterCount>0">
  Very few left!
</p>

<p v-else>
  Not in stock
</p>

Use the return value from a function

If a certain text contains the word 'pizza', create <p> tag with an appropriate message. The 'include()' method is a native JavaScript method that checks if a text contain certain words.

<div id="app">
    <p v-if="text.includes('pizza')">The text includes the word 'pizza'</p>
    <p v-else>The word 'pizza' is not found in the text</p>
</div>

data(){
    return{
        text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.'
    }
}

The example above can be expanded to show that v-if also can create other tags like <div> and <img> tags:

<div id="app">
  <div v-if="text.includes('pizza')">
    <p>The text includes the word 'pizza'</p>
    <img src="img_pizza.svg">
  </div>
  <p v-else>The word 'pizza' is not found in the text</p>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.'
      }
    }
  })
  app.mount('#app')
</script>

also

<div id="app">
  <div v-if="text.includes('pizza')">
    <p>The text includes the word 'pizza'</p>
    <img src="img_pizza.svg">
  </div>
  <div v-else-if="text.includes('burrito')">
    <p>The text includes the word 'burrito', but not 'pizza'</p>
    <img src="img_burrito.svg">
  </div>
  <p v-else>The words 'pizza' or 'burrito' are not found in the text</p>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.'
      }
    }
  })
  app.mount('#app')
</script>

- Vue v-show Directives
Conditional visibility
The v-show directive hides an element when the condition is 'false' by setting the CSS 'display' property value to 'none'.

After writing v-show as an HTML attribute we must give a condition to decide to have the tag visile or not.

<div v-show="showDiv"> This div tag can be hidden</div>

Display the <div> element only if the showDiv property is set to 'true'.

<div id="app">
  <div v-show="showDiv">This div tag can be hidden</div>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        showDiv: true
      }
    }
  })
  app.mount('#app')
</script>

v-show vs. v-if
The difference between v-show and v-if is that v-if creates (renders) the element depending on the condition, but with v-show the element is already created, v-show only changes its visibility.

Therefore, it is better to use v-show when switching visibility of an object, because it is easier for the browser to do, and it can lead to a faster response and better user experience.

A reason for using v-if over v-show is that v-if can be used with v-else-if and v-else.

<div id="app">
  <div v-show="showDiv">Div tag with v-show</div>
  <div v-if="showDiv">Div tag with v-if</div>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        showDiv: true
      }
    }
  })
  app.mount('#app')
</script>

- Vue v-for directive
With Vue you start with the HTML element you want to create into a list, with v-for as an attribute, refer to the array inside the Vue instance, and let Vue take care of the rest. And the elements created with v-for will automatically update when the array changes.

List rendering
List rendering in Vue is done by using the v-for directive, so that several HTML elements are created with a for-loop.

<ol>
    <li v-for="x in manyFoods">{{ x }}</li>
</ol>

Loop through an array

Show images of food, based on an array in the Vue instance.

<div>
    <img v-for="x in manyFoods" v-bind:src="x">
</div>

Loop through array of objects

<div>
    <figure v-for="x in manyFoods">
        <img v-bind:src="x.url">
        <figcaption>{{ x.name }}</figcaption>
    </figure>
</div>


Get the index
The index number of an array element can be really useful in JavaScript for-loops. Luckily we can get the index number when using v-for in Vue as well.

To get the index number with v-for we need to give two comma separated words in parentheses: the first word will be the array element, and the second word will be the index of that array element.

<p v-for="(x, index) in manyFoods">
    {{ index }}: "{{ x }}" <br>
</p>

We can also display both array element index and information from the array element itself, if the array elements are objects:

<p v-for="(x, index) in manyFoods">
    {{ index }}: "{{ x.name }}", url: "{{ x.url }}" <br>
</p>

- Vue events
Event handling in Vue is done with the v-on directive, so that we can make something happen when for example a button is clicked.

Event handling is when HTML elements are set up to run a certain code when a certain event happens.

Events in Vue are easy to use and will make our page truly reponsive.

Vue methods are code that can be set up to run when an event happens.

With v-on modifiers you can describe in more detail how to react to an event.

Get start with events
Click the button to count one more moose in the forest. The count property increases each time the button is clicked.

<div id="app">
  <img src="img_moose.jpg">
  <p>{{ "Moose count: " + count }}</p>
  <button v-on:click="count++">Count moose</button>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        count: 0
      }
    }
  })
 app.mount('#app')
</script>

Note: A benefit that comes with Vue is that the number of moose in the <p> tag is updated automatically. With plain JavaScript we would need to update the number the user sees with an additional line of code.

Events
There are lots of events we can use as triggers for running code, among the most common ones are: click, mouseover, mouseout, keydown and input.

v-on
The v-on directive allows usto create pages that respond to what the user does.

The Vue v-on works by telling the browser what event to listen to, and what to do when that event occurs.

Methods
If we want to run more complex code when an event occurs we can put the code in a Vue method and refer to this method from the HTML attribute, like this:

<p v-on:click="changeColor">Click me</p>

Event Modifiers
In addition to v-on and Vue methods we can use something called event modifiers to modify an event so that it for example only happens once after a page is loaded, or modify an event like 'submit' to prevent a form from being submitted.

- Vue v-on directive
onclick Event

The v-on directive allows us to perform actions based on spercified events.
Uset v-on:click to perform action when the element is clicked.

<div id="app>
  <div id="lightDiv">
    <div v-show="lightOn"></div>
    <img src="img_lightBulb.svg">
  </div>
  <button v-on:click="lightON = !lightOn">Switch light</button>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        lightOn: false
      }
    }
  })
  app.mount('#app')
</script>

oninput Event

Use v-on:input to perform action when the element gets an input, like a keystroke inside a text field.

<div id="app>
  <input v-on:input="inpCount++">
  <p>{{ 'Input events occured: ' + inpCount }}</p>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        inpCount: 0
      }
    }
  })
  app.mount('#app')
</script>

mousemove Event

Use v-on:mousemove to perform action when the mouse pointer moves over an element.

<div id="app>
  <p>Move the mouse pointer overthe box below</p>
  <div v-on:mousemove="colorVal=Math.floor(Math.random()*360)"
      v-bind:style="{backgroundColor:'hsl('+colorVal+'80%,80%)'}">
  </div>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        colorVal: 50
      }
    }
  })
  app.mount('#app')
</script>

Use v-on in a v-for loop

You can also use the v-on directive inside a v-for loop.

The items of the array are available for each iteration inside the v-on value.

<div id="app>
  <img v-bind:src="imgUrl">
  <ol>
    <li v-for="food in manyFoods" v-on:click="imgUrl=food.url">
      {{ food.name }}
    </li>
  </ol>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        imgUrl: 'img_salad.svg',
        manyFoods:[
          {name: 'Burrito', url: 'img_burrito.svg'},
          {name: 'Salad', url: 'img_salad.svg'},
          {name: 'Cake', url: 'img_cake.svg'},
          {name: 'Soup', url: 'img_soup.svg'},
        ]
      }
    }
  })
  app.mount('#app')
</script>

Shorthand for v-on

The shorthand for 'v-on' is simply '@'.

<button @:click="lihgtOn = !lightOn">Switch light</button>

- Vue methods
Vue methods are functions that belong to the Vue istance under the 'methods' property. They are great to use with event handling (v-on) to do more complex things. They can also be used to do other things than event handling.

The Vue methods property
We have already used on Vue property in this tutorial, the 'data' property, where we can store values.

There is another Vue property called 'methods' where we can store functions that belong to the Vue instance. A method can be stored in the Vue instance like this:

const app = Vue.createApp({
  data() {
    return {
      text: ''
    }
  },
  methods: {
    writeText() {
      this.text = 'Hello world!'
    }
  }
})

Tip: We need to write this. as prefix to refer to a data property from inside a method.

To call the 'writeText' method when we click the <div> element we can write the code below:

<div v-on:click="writeText"></div>

The v-on directives is used on the <div> element to listen to the click event. When the click event occurs the writeText method is called and the text is changed.

<div id="app">
  <p>Click on the box below:</p>
  <div v-on:click="writeText">
    {{ text }}
  </div>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        text: ''
      }
    },
    methods: {
      writeText() {
        this.text = 'Hello world!'
      }
    }
  })
  app.mount('#app')
</script>

Call a method with the event object

When an event occurs so that a method is called, the event object is passed with the method by default. This is very convenient because the event object contains a lot of useful data, like for example the target object, the event type, or the mouse position when the click or mousemove event ocurred.

<div id="app">
  <p>Move the mouse pointer over the box below:</p>
  <div v-on:mousemove="mousePos"></div>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        xPos: 0,
        yPos: 0
      }
    },
    methods: {
      mousePos(event) {
        this.xPos = event.offsetX
        this.yPos = event.offsetY
      }
    }
  })
  app.mount('#app')
</script>

The difference here from the example above is that the background color is bound to xPos with v-bind so that hsl 'hue' value is set equal to xPos.

<div v-on:mousemove="mousePos"
      v-bind:style="{backgroundColor: 'hsl('+xPost+',80%,80%')}">
</div>

In the example below the event object carries a text from the <textarea> tag to make it look like we are writing inside a notebook.

<div id="app">
  <textarea v-on:input="writeText" placeholder="Start writing.."></textarea>
  <span>{{ text }}</span>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        text: ''
      }
    },
    methods: {
      writeText(event) {
        this.text = event.target.value
      }
    }
  })
  app.mount('#app')
</script>

Passing arguments

<button v-on:click="addMoose(5)">+5</button>

methods:{
  addMoose(number){
    this.count = this.count + number
  }
}

<div id="app">
  <img src="img_moose.jpg">
  <p>{{ "Moose count: " + count }}</p>
  <button v-on:click="addMoose(+1)">+1</button>
  <button v-on:click="addMoose(+5)">+5</button>
  <button v-on:click="addMoose(-1)">-1</button>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        count: 0
      }
    },
    methods: {
      addMoose(number) {
        this.count+=number
      }
    }
  })
  app.mount('#app')
</script>

Passing both an Argument and The Event Object
If we want to pass both the event object and another argument, there is a reserved name $event we can use where the method is called, like this:

<button v-on:click="addAnimal($event, 5)">+5</button>

methods:{
  addAnimal(e, number){
    if(e.target.parentElement.id==="tigers"){
      this.tigers = this.tigers + number
    }
  }
}

<div id="app">
  <img src="img_tiger.jpg"
        id="tiger"
        v-on:click="myMethod($event, 'Hello')">
  <p>"{{ msgAndId }}"</p>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        msgAndId: ''
      }
    },
    methods: {
      myMethod(e, msg) {
        this.msgAndId = msg + ', '
        this.msgAndId += e.target.id
      }
    }
  })
  app.mount('#app')
</script>

- Vue event modifiers
Event modifiers in Vue modify how events trigger the running of methods and help us handle events in a more effivient and straightforward way.

Event modifiers are used together with the Vue v-on directive, to for example:

- Prevent the degault submit behavior of HTML forms (v-on:submit.prevent).
- Make sure that an event can only run once after the page is loaded (v-on:click.once).
- Specify what keyboard key to use as an event to run a method (v-on:keyup.enter).

How to modify the v-on directive
Event modifiers are used to difine how to react on an event in more detail.

We use event modifiers by first connecting a tag to an event like we have seen before:

<button v-on:click="createAlert">Create alert</button>

Now, to define more specifically that the button click event should only fire one time after the page loads, we can add the .once modifier, like this:

<button v-on:click.once="createAlert">Create alert</button>

<div id="app">
  <p>Click the button to create an alert:</p>
  <button v-on:click.once="createAlert">Create alert</button>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        msgAndId: ''
      }
    },
    methods: {
      createAlert(){
        alert("Alert created from button click")
      }
    }
  })
  app.mount('#app')
</script>

Different v-on modifiers
Event modifiers are used in different situations. We can use event modifiers when we listen to keyboard events, mouse click events, and we can even use event modifiers in combination with each other.

The event modifier .once can be used after both keyboard and mouse click events.

We have three different keyboard event types keydown, keypress, and keyup.

With each key event type, we can specify exactly what key to listen to after a key event occurs. We have .space, .enter, .w and .up to name a few.

You can write the key event to the web page, or to the console with console.log(event.key), to find the value of a certain key yourself:

<input v-on:keydown="getKey">
<p> {{ keyValue }} </p>

data() {
  return {
    keyValue = ''
  }
},
methods: {
  getKey(evt){
    this.keyValue = evt.key
    console.log(evt.key)
  }
}

We can also choose to limit the event to happen only when a mouse click or a key press happens in combination with system modifiers keys .alt, .ctrl, .shift or .meta. The system modifier key .meta represents the Windows key on Windows computers, or command key on Apple computers.

Use the .s modifier to create an alert when the user writes an 's' inside the <textarea> tag.

<div id="app">
  <p>Try pressing the 's' key:</p>
  <textarea v-on:keyup.s="createAlert"></textarea>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        msgAndId: ''
      }
    },
    methods: {
      createAlert(){
        alert("You pressed the 'S' key!")
      }
    }
  })
  app.mount('#app')
</script>

Combine keyboard event modifiers
Use the .s and .ctrl modifiers in combination to create an alert when 's' and 'ctrl' are pressed simultaneously inside the <textearea> tag.

<div id="app">
  <p>Try pressing the 's' key:</p>
  <textarea v-on:keyup.ctrl.s="createAlert"></textarea>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    methods: {
      createAlert(){
        alert("You pressed the 'S' and 'Ctrl' key, in combination!")
      }
    }
  })
  app.mount('#app')
</script>

Mouse button modifiers
To react on a mouse click, we can write v-on:click, but to specify which mouse button that was clicked, we can use .left, .center or .right modifiers.

Trackpad users: You might need to click with two fingers, or in the lower right hand side of the trackpad on your computer to create a right click.

<div id="app">
  <div v-on:click.right="changeColor"
        v-bind:style="{backgroundColor:'hsl('+bgColor+',80%,80%)'}">
    <p>Press right mouse button here.</p>
  </div>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        bgColor: 0
      }
    },
    methods: {
      changeColor(){
        this.bgColor+=50
      }
    }
  })
  app.mount('#app')
</script>

Mouse button events can also work in combination with a system modifier key.

<div id="app">
  <div v-on:click.right.ctrl="changeColor"
        v-bind:style="{backgroundColor:'hsl('+bgColor+',80%,80%)'}">
    <p>Press right mouse button here.</p>
  </div>
</div>

The event modifier .prevent canbe used in addition to the .right modifier to prevent the default drop-down menu to appear when we right click.

<div id="app">
  <div v-on:click.right.prevent="changeColor"
        v-bind:style="{backgroundColor:'hsl('+bgColor+',80%,80%)'}">
    <p>Press right mouse button here.</p>
  </div>
</div>

It would be possible to prevent the drop-down menu from appearing after right click by using event.preventDefault() inside the method, but with the Vue .prevent modifier the code becomes more readable and easier to maintain.

You can also react on left button mouse clicks in combination with other modifiers like click.left.shift:

<div id="app">
  <p>Hold 'Shift' key and press left mouse button:</p>
  <img v-on:click.left.shift="changeImg" v-bind:src="imgUrl">
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        imgUrlIndex: 0,
        imgUrl:'img_tiger_square.jpeg',
        imgages: [
          'img_tiger_square.jpeg',
          'img_moose_square.jpeg',
          'img_kangaroo_square.jpeg'
        ]
      }
    },
    methods: {
      changeImg(){
        this.imgUrlIndex++
        if(this.imgUrlIndex>=3){
          this.imgUrlIndex=0
        }
        this.imgUrl = this.images[this.imgUrlIndex]
      }
    }
  })
  app.mount('#app')
</script>

- Vue Forms
Vue gives us an easy way to improve the user experience with forms by adding extra functionality like responsiveness and from validation.

Vue uses the v-model directive when handling forms.

Our first form with Vue
In this example we can add new items to a shopping list.

<div id="app">
  <form v-on:submit.prevent="addItem">
    <p>Add item</p>
    <p>Item name: <input type="text" required v-model="itemName"></p>
    <p>How many: <input type="number" v-model="itemNumber"></p>
    <button type="submit">Add item</button>
  </form>
  <p>Shopping list:</p>
  <ul>
    <il v-for="item in shoppingList">{{item.name}}, {{item.number}}</li>
  </ul>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        itemName: null,
        itemNumber: null,
        shoppingList: [
          { name: 'Tomatoes', number: 5 }
        ]
      }
    },
    methods: {
      addItem(){
        let item = {
          name: this.itemName,
          number: this.itemNumber
        }
        this.shoppingList.push(item)
        this.itemName = null
        this.itemNumber = null
      }
    }
  })
  app.mount('#app')
</script>

Notice the two-way binding v-model provides in the example above:
- v-model updates the Vue instance data when the HTML input change.
- v-model also updates the HTML input when the Vue instance data changes.

- Vue v-model directive
Compared to normal JavaScript, it is easier to work with forms in Vue because the v-model directive connects with all types of input elements in the same way.

v-model creates a link between the input element value attribute and a data value in the Vue instance. When you change the input, the data updates and when the data changes, the input updates as well (two-way binding).

Two-way binding
As we have already seen in the shopping list example on the previous page, v-model provides us with a two-way binding, meaning that the form input elements update the Vue data instance, and a change in the Vue instance data updates the inputs.

The example below also demonstrates the two-way binding with v-model.

<div id="app">
  <input type="text" v-model="inpText">
  <p> {{ inpText }} </p>
</div>
<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        inpText: 'Initial text'
      }
    }
  })
  app.mount('#app')
</script>

Note: The v-model two-way binding functionality could actually be achieved with a combination of v-on:input:
- v-bind:value to update the input element from the Vue instance data, and v-on:input to update the Vue instance data from the input.

But v-model is much easier to use so that is what we will do.

A dynamic checkbox
We add a checkbox to our shopping list on the previous page to mark if an item is important or not.

Next to the checkbox we add a text that always reflects the current 'important' status, changing dynamically between true or false.

We use v-model to add this dynamic checkbox and text to improve user interaction.

We need:
- a boolean value in the Vue instance data property called 'important'.
- a checkbox where the user can check if the item is important.
- a dynamic feedback text so that the user can see if the item is important.

Below is how the 'important' feature looks, isolated from the shopping list.

<div id="app">
  <form>
    <p>
      Important item?
      <label>
        <input type="checkbox" v-model="important">
        {{ important }}
      </label>
    </p>
  </form>
</div>
<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    data() {
      return {
        important: false
      }
    }
  })
  app.mount('#app')
</script>

Vue CSS binding
Learn more about how to use v-bind to modify CSS with the style and class attributes.

While the concept to change the style and class attributes with v-bind is fairly straight forward, the sysntax might need some getting used to.

Dynamic CSS in Vue
You have already seen how we can use Vue to modify CSS by using v-bind on the styly and class attributes. It has been explained briefly in this tutorial under v-bind and several examples with Vue changing CSS has also been given.

Here we will explain in more detail how CSS can be changed dynamically with Vue. But first lets look at two examples with techniques we hace already seen in this tutorial: in-line styling with v-bind:style and assigning a class with v-bind:class.

Inline styling
We use v-bind:style to do in-line styling in Vue.

<input type="range" v-model="opacityVal">
<div v-bind:style="{ backgroundColor: 'rgba(155,20,20,'+opacityVal+')' }">
  Drag the range input above to chane opacity here.
</div>

Assign a class
We use v-bind:class to assign a class to an HTML tag in Vue.

<div v-for="(img, index) in images">
  <img v-bind:src="img.url"
        v-on:click="select(index)"
        v-bind:class="{ selClass: img.sel }">
</div>

Other ways to assign classes and style
Here aredifferent aspects regarding the use of v-bind:class and v-bind:style that we have not seen before in this tutorial:

1.- When CSS classees are assigned to an HTML tag with both class="" and v-bind:class="" Vue merges the classes.
2.- An object containing one or more classes is assigned with v-bind:class="{}". Inside the object one or more classes might be toggled on or off.
3.- With in-line styling (v-bind:style) camelCase is preferred when defining a CSS property, but 'kebab-case' can also be used if it is written inside quoutes.
4.- CSS classes can be assigned with arrays / with array notation / syntax.

1.-Vue merges 'class' and 'v-bind:class'

<div class="impClass" v-bind:class="{yelClass: isYellow}">
  This div belongs to both 'impClass' and 'yelClass'.
</div>

2.- Assign more than one class with 'v-bind:class'

<div v-bind:class="{yelClass: isYellow, impClass: isImportant}">
  This tag can belong to both the 'impClass' and 'yelClass' classes.
</div>

3.- Camel case vs kebab case notation with 'v-bind:style'

<div v-bind:style="{ backgroundColor: 'lightpink', 'font-weight': 'bolder' }">
  This div tag has pink background and bold text.
</div>

4.- Array syntax with 'v-bind:class'

<div v-bind:class="[{ impClass: isImportant }, 'yelClass' ]">
  This div tag belongs to one or two classes depending on the isImportant property.
</div>

- Vue computed properties
Computed properties are like data properties, except they depend on other properties.

Computed properties are written like methods, but they do not accept any input arguments.

Computed properties are updated automatically when a dependency changes, while methods are called on when something happens, like with event handling for example.

Computed properties are used whtn otputting something that depends on something else.

Computed properties are dynamic
The big advantage with a computed property is that it is dynamic, meaning it changes depending on for example the value of one or more data properties.

Computed properties is the third configuration option in the Vue instance that we eill learn. The first two configuration options we have already looked at are 'data' and 'methods'.

As with 'data' and 'methods' computed properties also has a reserved name in the Vue instance: 'computed'.

const app = Vue.createApp({
  data() {
    ...
  },
  computed: {
    ...
  },
  methods: {
    ...
  }
})

Computed property yes or no
Let's say we want a from to create items in a shoping list, and we want to mark if a new item is important of not. We could add a true or false feedback when the checkbox gets checked, like we have done in an example before:

<input type="checkbox" v-model="chbxVal"> {{ chbxVal }}

data() {
  return {
    chbxVal: false
  }
}

However, if you ask someone if something is important, they will most likely answer yes or no instead of true or false. So to make our form more fitting with normal language (more intuitive) we should have 'yes' or 'no' as feedback on the checkbox instead of true or false.

And guess what, a computed property is a perfect tool to help us with that.

<input type="checkbox" v-model="chbxVal"> {{ isImportant }}

data() {
  return {
    chbxVal: false
  }
},
computed: {
  isImportant() {
    if(this.chbxVal){
      return 'yes'
    }
    else {
      return 'no'
    }
  }
}

Computed properties vs methods
Computed properties and methods are both written as functions, but they are different:

- Methods runs when called from HTML, but computed properties updates automatically when a dependency change.
- Computed properties are used the same way we use data properties, but they are dynamic.

- Vue watchers
A watcher is a method that watches a data property with the same name.

A watcher runs every time the data property value changes.

Use a watcher if a certain data property value requires an action.

The watcher concept
Watchers is the fourth configuration option in the Vue instance that we will learn. The first three configuration options we have already looked at are 'data', 'methods' and 'computed'.

As with 'data', 'methods' and 'computed' watchers also has a reserved name in the Vue instance: 'watch'.

const app = Vue.createApp({
  data() {
    ...
  },
  watch: {
    ...
  },
  computed: {
    ...
  },
  methods: {
    ...
  }
})

As mentioned in the green area at the top, a watcher monitors a data property with the same name.

We never call a watcher method. It is only called automatically when the property value changes.

The new property value is always available as an input argument to the watcher method, and so is the old value.

<input type="range" v-model="rangeVal">
<p>{{ rangeVal }}</p>

const app = Vue.createApp({
  data() {
    rangeVal: 70
  },
  watch: {
    rangeVal(val){
      if(val>20 && val<60){
        if(val<40){
          this.rangeVal = 20;
        }
        else {
          this.rangeVal = 60;
        }
      }
    }
  }
})

A watcher with new and old value
In addition to the new property value, the previous property valur is also autonamtically available as an input argument to watcher methods.

We set up click event on a <div> elemtne to record mouse pointer x-postion 'xPos' with a method 'updatePos'. A watcher calculates the difference in pixels between the new x-position and the previous with the use of old and new input arguments to the watcher method.

<div v-on:click="updatePos"></div>
<p>{{ xDiff }}</p>

const app = Vue.createApp({
  data() {
    xPos: 0,
    xDiff: 0
  },
  watch: {
    xPos(newVal,oldVal){
      this.xDiff = newVal-oldVal
    }
  },
  methods: {
    updatePos(evt){
      this.xPos = evt.offsetX
    }
  }
})

We can also use new and old values to givefeedback to the user the exact moment the input goes from being invalid to valid:

The value from an <input> element is connected to a watcher. If the value includes a @ it is considered a valied e-mail address. The user gets a feedback text to inform if the input is valid, invalid, or if it just got valid with the last keystroke.

<input v-type="email" v-model="inpAddress">
<p v-bind:class="myClass">{{ feedbackText }}</p>

const ap = Vue.createApp({
  data() {
    inpAddress: '',
    feedbackText: '',
    myClass: 'invalid'
  }.
  watch: {
    inpAddress(newVal,oldVal){
      if(!newVal.includes('@')){
        this.feedbackText = 'The e-mail address is NOT valid';
        this.myClass = 'invalid';
      }
      else if(!oldVal.includes('@') && newVal.includes('@')){
        this.feedbackText = 'Perfect! You fixed it!';
        this.myClass = 'valid';
      }
      else {
        this.feedbackText = 'The e-mail address is valid.';
      }
    }
  }
})

Watchers vs methods
Watchers and methods are both written as functions, but there are many differences:

- Methods are called from HTML.
- Methods are often called when and event happens.
- Methods automatically receives the event object as an input.
- We can also send other values we choose as an input to a method.
- Watchers are only called when the watched data property value changes, and this happens automatically.
- Watchers automatically receives the new and old value from the watched property.
- We cannot choose to send any other values with a watcher as an input.

Watchers vs computed properties
Watchers and computed properties are both written as functions.

Watchers and computed properties are both called automatically when a dependncy change, and never called from HTML.

Here are some differences between computed properties and watchers:

- Watchers only depend on one property, the porperty they are set up to watch.
- Computed properties can depend on many properties.
- Computed properties are used like data properties, except they are dynamic.
- Watchers are not referrend to from HTML.

- Vue templates
A template in Vue is waht we call the HTML part of our Vue application.
The <template> tag will later be used in *.vue files to structure our code in a better way.
It is possible to use template as an configuration option in the Vue instance, and put the HTML code inside.

The Vue template
Let's look at an example where we use template as a configuration option. This is a simple ecample where we have just moved the HTML part into the configuration option template:

The HTML content from insde the <div id="app"> is moved to the configuration option 'template', encapsulated in backtick quotes '...'. We can write man lines of HTML inside a back tick quote.

<div id="app"></div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
  const app = Vue.createApp({
    template:
    '<h1>{{ message }}</h1>
    <p>This is a second line of HTML code, inside back tick quotes</p>',
    data() {
      return {
        message: "Hellow World!"
      }
    }
  })
  app.mount('#app')
</script>

Single file components (SFCs)
As you can see in the code example above, alse the HTML part of our Vue application can be gathered inside the Vue instance, but this does not make it easier to get an overview in the HTML file.

To get a better overview, to make it easier to handle larger projects, and to get a better development enviroment, we will now switch to write our Vue code in SFCs, or *.vue files.

All *.vue files only consist of three parts:

- <template> where the HTML content is.
- <script> for our Vue code.
- <style> where we write the CSS styling.

But before we can use *.vue files in our project we need to set up our computer in a different way.

